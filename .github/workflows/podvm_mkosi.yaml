name: Create a Pod VM image with mkosi

on:
  workflow_dispatch:
    inputs:
      binaries-image:
        description: "Prebuild fedora binaries image, as produced by this workflow under ghcr.io/confidential-containers/cloud-api-adaptor/podvm/binaries-fedora-<arch>"
        required: false
      registry:
        default: 'quay.io/confidential-containers'
        required: false
        type: string
      image_tag:
        default: ''
        required: false
        type: string
      git_ref:
        description: Git ref to checkout the cloud-api-adaptor repository.
        required: true
        type: string
      debug:
        description: Whether to build the image in debug mode
        default: false
        required: false
        type: boolean

  workflow_call:
    inputs:
      binaries-image:
        description: "Prebuild fedora binaries image, as produced by this workflow under ghcr.io/confidential-containers/cloud-api-adaptor/podvm/binaries-fedora-<arch>"
        required: false
        type: string
      registry:
        default: 'quay.io/confidential-containers'
        required: false
        type: string
      image_tag:
        default: ''
        required: false
        type: string
      git_ref:
        description: Git ref to checkout the cloud-api-adaptor repository.
        required: true
        type: string
      debug:
        description: Whether to build the image in debug mode
        default: false
        required: false
        type: boolean

defaults:
  run:
    working-directory: src/cloud-api-adaptor

jobs:
  build-binaries:
    name: Build binaries
    # TODO - better to enable mechanism to check if the image of matching hash already exists and then just pull it locally
    if: ${{ inputs.binaries-image == '' }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [S390X, ubuntu-22.04]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: "${{ inputs.git_ref }}"

      - name: Rebase the code
        if: github.event_name == 'pull_request_target'
        working-directory: ./
        run: |
          ./hack/ci-helper.sh rebase-atop-of-the-latest-target-branch

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to quay Container Registry
        if: ${{ startsWith(inputs.registry, 'quay.io') }}
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Login to the ghcr Container registry
        if: ${{ startsWith(inputs.registry, 'ghcr.io') }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install build dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y bubblewrap alien dnf qemu-utils uidmap
          sudo snap install yq

      - name: Decide on image_tag to use
        id: image_tag
        run: |
          image_tag="${{ inputs.image_tag }}"
          if [ -z "${image_tag}" ]; then
            image_tag=${{ github.sha }}
          fi
          echo "image_tag=${image_tag}" | tee -a "$GITHUB_OUTPUT"

      - name: Build builder
        working-directory: src/cloud-api-adaptor/podvm-mkosi
        run: make fedora-binaries-builder
        env:
          PUSH: true
          REGISTRY: ${{ inputs.registry }}
          PODVM_TAG: ${{ steps.image_tag.outputs.image_tag }}

      - name: Build binaries
        working-directory: src/cloud-api-adaptor/podvm-mkosi
        run: make binaries
        env:
          PUSH: true
          REGISTRY: ${{ inputs.registry }}
          PODVM_TAG: ${{ steps.image_tag.outputs.image_tag }}

  build-image:
    name: Build mkosi image
    runs-on: ${{ matrix.platforms.runner }}
    strategy:
      fail-fast: false
      matrix:
        platforms: [
          { arch: "amd64", runner: "ubuntu-22.04"},
          { arch: "s390x", runner: "S390X" },
        ]
    needs: [build-binaries]
    if: |
      always() && (
          needs.build-binaries.result == 'success' || (
              needs.build-binaries.result == 'skipped' &&
              inputs.binaries-image != ''
          )
      )
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: "${{ inputs.git_ref }}"

      - name: Rebase the code
        if: github.event_name == 'pull_request_target'
        working-directory: ./
        run: |
          ./hack/ci-helper.sh rebase-atop-of-the-latest-target-branch

      - name: Login to quay Container Registry
        if: ${{ startsWith(inputs.registry, 'quay.io') }}
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Login to the ghcr Container registry
        if: ${{ startsWith(inputs.registry, 'ghcr.io') }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install build dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y bubblewrap alien dnf qemu-utils uidmap
          sudo snap install yq

      - name: Install mkosi
        if: matrix.platforms.runner != 'ubuntu-22.04'
        run: |
          git clone -b v22 https://github.com/systemd/mkosi
          sudo rm -f /usr/local/bin/mkosi
          sudo ln -s $PWD/mkosi/bin/mkosi /usr/local/bin/mkosi
          mkosi --version

      - name: Install Nix
        if: matrix.platforms.runner == 'ubuntu-22.04'
        uses: cachix/install-nix-action@v22

      - name: Build nix shell to cache dependencies
        if: matrix.platforms.runner == 'ubuntu-22.04'
        run: nix build .#devShells.x86_64-linux.podvm-mkosi

      - name: Install crane with nix
        if: matrix.platforms.runner == 'ubuntu-22.04'
        run: nix profile install nixpkgs#crane

      - name: Read properties from versions.yaml
        if: matrix.platforms.runner != 'ubuntu-22.04'
        run: |
          sudo snap install yq
          go_version="$(yq '.tools.golang' versions.yaml)"
          echo "GO_VERSION=${go_version}" >> "$GITHUB_ENV"

      - name: Setup Golang version ${{ env.GO_VERSION }}
        if: matrix.platforms.runner != 'ubuntu-22.04'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install crane with go
        if: matrix.platforms.runner != 'ubuntu-22.04'
        run: |
          go install github.com/google/go-containerregistry/cmd/crane@latest
          echo "PATH=${PATH}:`go env GOPATH`/bin" >> $GITHUB_ENV

        # This removes the checkout and creates a btrfs volume with maximized
        # build space.
      - name: Maximize build space
        if: matrix.platforms.runner == 'ubuntu-22.04'
        uses: katexochen/maximize-build-space@btrfs
        with:
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Second checkout
        if: matrix.platforms.runner == 'ubuntu-22.04'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: "${{ inputs.git_ref }}"

      - name: Decide on image_tag to use
        id: image_tag
        run: |
          image_tag="${{ inputs.image_tag }}"
          if [ -z "${image_tag}" ]; then
            image_tag=${{ github.sha }}
          fi
          echo "image_tag=${image_tag}" | tee -a "$GITHUB_OUTPUT"

      - name: Decide on image to use
        id: binaries-image
        run: |
          if [ -z "${{ inputs.binaries-image }}" ]; then
            echo "image=${{ inputs.registry }}/podvm-binaries-fedora-${{ matrix.platforms.arch }}:${{ steps.image_tag.outputs.image_tag }}" | tee -a "$GITHUB_OUTPUT"
          else
            echo "image=${{ inputs.binaries-image }}" | tee -a "$GITHUB_OUTPUT"
          fi

      - name: Download binaries and unpack into binaries-tree
        run: |
          crane export \
            ${{ steps.binaries-image.outputs.image }} \
            podvm-binaries.tar
          mkdir -p podvm-mkosi/resources/binaries-tree
          tar xf podvm-binaries.tar -C podvm-mkosi/resources/binaries-tree
          rm podvm-binaries.tar

      - name: Build mkosi image
        working-directory: src/cloud-api-adaptor/podvm-mkosi
        run: |
          if [ "${{inputs.debug}}" = "true" ]; then
            echo "Making debug image"
            make image-debug
          else
            echo "Making non-debug image"
            make image
          fi
        env:
          PUSH: true
          REGISTRY: ${{ inputs.registry }}
          PODVM_TAG: ${{ steps.image_tag.outputs.image_tag }}
